variables p q r :Prop

/-commmutativity of ∧ and ∨ -/
/-proof without using assume and show-/
example : p ∧ q ↔ q ∧ p:= 
iff.intro
 (λ h1:p∧q, and.intro (and.right h1) (and.left h1)) 
 (λ h2:q∧p, and.intro (and.right h2) (and.left h2)) 

/-proof using assume-/
example : p ∨ q ↔ q ∨ p:=
 iff.intro
  (assume h:p ∨ q, or.elim h (assume h1:p,or.inr h1)(assume h2:q,or.inl h2) )
  (assume h:q ∨ p, or.elim h (assume h1:q,or.inr h1)(assume h2:p,or.inl h2))

/-associativity of ∧ and ∨ -/
example: (p ∧ q) ∧ r ↔ p ∧ (q ∧ r):=
iff.intro
(assume h:(p ∧ q) ∧ r ,⟨and.left (and.left h),⟨ and.right (and.left h),and.right h⟩ ⟩) 
(assume h:p ∧ (q ∧ r),⟨ ⟨ and.left h,and.left (and.right h)⟩,and.right (and.right h)⟩ )

example: (p ∨ q) ∨ r ↔ p ∨ (q ∨ r):=
iff.intro
(assume h : (p ∨ q) ∨ r,
or.elim h 
(assume h1 : p ∨ q, or.elim h1 (assume hp : p, or.inl hp) (assume hq : q, or.inr (or.inl hq)))
(assume h2 : r, or.inr (or.inr h2)))
(assume h : p ∨ (q ∨ r),
or.elim h
(assume h1 : p, or.inl (or.inl h1))
(assume h2 : q ∨ r,or.elim h2 (assume hq : q, or.inl (or.inr hq)) (assume hr : r, or.inr hr)))

/-other properties-/
example : (p → (q → r)) ↔ (p ∧ q → r) :=
iff.intro
(assume h: (p → (q → r)), assume h1 : p ∧ q,h h1.left h1.right)
(assume h: (p ∧ q→r), assume h1 : p, assume h2 : q, h ⟨h1, h2⟩)

example : ((p ∨ q) → r) ↔ (p → r) ∧ (q → r) :=
iff.intro
(assume h:((p ∨ q) → r), and.intro (assume h1 :p, h (or.inl h1)) (assume h2: q, h (or.inr h2)))
(assume h:(p → r) ∧ (q → r), assume h0 : p ∨ q, or.elim h0 (assume h1 : p, h.left h1) (assume h2 : q, h.right h2))

example : ¬(p ∨ q) ↔ ¬p ∧ ¬q :=
iff.intro
(assume h : ¬(p ∨ q), and.intro (assume h1 : p, h (or.inl h1)) (assume h2 : q, h (or.inr h2)))
(assume h : ¬p ∧ ¬q, (assume h0 : p ∨ q, or.elim h0 (assume h1 : p, absurd h1 h.left) (assume h2 : q, absurd h2 h.right)))

example: ¬p ∨ ¬q → ¬(p ∧ q) :=
assume h: ¬p ∨ ¬q, (assume h0: p ∧ q, or.elim h (assume h1 : ¬p, absurd h0.left h1) (assume h2 : ¬q, absurd h0.right h2))

example : ¬(p ∧ ¬p) := assume h : p ∧ ¬p,absurd h.left h.right

example : p ∧ ¬q → ¬(p → q) := assume h : p ∧ ¬q, assume h1 : p → q, absurd (h1 h.left) h.right 

example : ¬p → (p → q) := assume h : ¬p, assume h1 : p, absurd h1 h

example: (¬p ∨ q) → (p → q):= assume h:(¬p ∨ q), (assume h1: p, or.elim h (assume h1n : ¬p, absurd h1 h1n) (assume h2 : q, h2))
